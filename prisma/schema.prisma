// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  company       Company?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id                 String       @id @default(cuid())
  name               String
  addressLine1       String?
  addressLine2       String?
  city               String?
  postalCode         String?
  country            String?
  vatId              String?      // VAT ID/BTW-nummer
  phoneNumber        String?
  email              String?
  website            String?
  bankAccountName    String?
  bankAccountNumber  String?
  bankAccountBIC     String?
  logoUrl            String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  userId             String       @unique // One-to-one with User
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers          Customer[]
  documents          Document[]
  templates          Template[]
  companyTranslation CompanyTranslation[]
}

model CompanyTranslation {
  id                     String   @id @default(cuid())
  languageCode          String   // e.g., 'en', 'nl'
  addressLine1          String?
  addressLine2          String?
  paymentTermsText      String?
  invoiceFooterText     String?
  offerFooterText       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  companyId             String
  company               Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, languageCode])
}

model Customer {
  id             String     @id @default(cuid())
  companyName    String
  contactPerson  String?
  email          String?
  phoneNumber    String?
  billingAddress String?
  shippingAddress String?
  vatId          String?
  notes          String?
  preferredLanguage String?  // e.g., 'en', 'nl'
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  companyId      String
  company        Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documents      Document[]
}

enum DocumentType {
  OFFER
  INVOICE
}

enum DocumentStatus {
  DRAFT
  SENT
  ACCEPTED // For offers
  DECLINED // For offers
  EXPIRED  // For offers
  PAID     // For invoices
  PARTIALLY_PAID // For invoices
  OVERDUE  // For invoices
  VOIDED   // For both
}

model Document {
  id             String         @id @default(cuid())
  documentNumber String         @unique
  type           DocumentType
  status         DocumentStatus @default(DRAFT)
  issueDate      DateTime       @default(now())
  dueDate        DateTime?
  languageCode   String         // e.g., 'en', 'nl'
  validUntil     DateTime?      // For offers
  totalAmount    Decimal        @default(0)
  totalTax       Decimal        @default(0)
  totalDiscount  Decimal        @default(0)
  paymentTerms   String?
  notes          String?
  pdfUrl         String?
  pdfGoogleDriveId String?
  emailSent      Boolean        @default(false)
  lastEmailSentAt DateTime?
  convertedToInvoiceId String?   // If this is an offer that was converted to an invoice
  convertedFromOfferId String?   // If this is an invoice converted from an offer
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  customerId     String
  customer       Customer       @relation(fields: [customerId], references: [id])
  companyId      String
  company        Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  templateId     String
  template       Template       @relation(fields: [templateId], references: [id])
  lineItems      LineItem[]
}

model LineItem {
  id          String   @id @default(cuid())
  description String
  quantity    Decimal
  unitPrice   Decimal
  discount    Decimal  @default(0)
  taxRate     Decimal  @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  documentId  String
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model Template {
  id           String     @id @default(cuid())
  name         String
  type         DocumentType
  languageCode String     // e.g., 'en', 'nl'
  isDefault    Boolean    @default(false)
  content      String     @db.Text // JSON or HTML content of the template
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documents    Document[]

  @@unique([companyId, type, languageCode, isDefault])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}